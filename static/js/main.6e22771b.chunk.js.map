{"version":3,"sources":["components/DisplayArea.js","components/InputCodeArea.js","components/FaceA.js","App.js","index.js"],"names":["DisplayArea","varName","varValue","varType","varSize","data","this","props","history","dataToShow","length","dataType","Component","InputCodeArea","className","type","id","name","placeholder","value","code","onChange","handleInput","onKeyDown","handleDelete","FaceA","state","codeInput","restString","autoSpace","autoValue","e","a","async","target","setState","validateFirst","validateSecond","varNameStart","replace","endsWith","varValueStart","endSentence","event","key","slice","str","secondTypeStart","dataTypes","i","exec","String","historyValue","push","line","s","randomValue","randomValGen","size","search","min","max","Math","ceil","floor","random","result","characters","charactersLength","charAt","getRandomInt","toString","getRandomChar","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e22771b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//this component displays the values that that has gotten from interFaceA\r\nexport class DisplayArea extends Component {\r\n  render() {\r\n    var varName, varValue, varType, varSize;\r\n    var data = this.props.history;\r\n\r\n    var len = data.length;\r\n    var dataToShow = data[len - 1];\r\n    if (dataToShow) {\r\n      varName = dataToShow.varName;\r\n      varValue = dataToShow.varValue;\r\n      varType = dataToShow.dataType;\r\n      varSize = dataToShow.varSize;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <p>\r\n          this is a program that detects C++ Primitive Data Types from user\r\n          input and translates it into C++. writen in vanilla JS using React\r\n          framework without any C++ node package.\r\n        </p>\r\n        <ul>\r\n          <li>Variable Name: {varName}</li>\r\n          <li>Data Type: {varType}</li>\r\n          <li>Value: {varValue}</li>\r\n          <li>variable size: {varSize}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayArea;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class InputCodeArea extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"inputCodeArea\">\r\n        <input\r\n          className=\"textBox\"\r\n          type=\"text\"\r\n          id=\"codeInput\"\r\n          name=\"codeInput\"\r\n          placeholder=\"Your c++ code...\"\r\n          value={this.props.code}\r\n          onChange={this.props.handleInput}\r\n          onKeyDown={this.props.handleDelete}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputCodeArea;\r\n","import React, { Component } from \"react\";\r\nimport DisplayArea from \"./DisplayArea\";\r\nimport InputCodeArea from \"./InputCodeArea\";\r\n\r\nexport class FaceA extends Component {\r\n  state = {\r\n    codeInput: \"\",\r\n    data: null,\r\n    history: [],\r\n    dataType: null,\r\n    restString: \"\",\r\n    varValue: null,\r\n    varSize: null,\r\n    varName: null,\r\n    autoSpace: false,\r\n    autoValue: false\r\n  };\r\n\r\n  //this function examins input and calls proper function.\r\n  handleInput = async e => {\r\n    var { varName, dataType } = this.state;\r\n    var { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n\r\n    // VALIDATE DATA TYPE\r\n    await this.validateFirst(value);\r\n    await this.validateSecond();\r\n\r\n    //VALIDATE VARIABLE NAME\r\n    if (dataType != null) {\r\n      var varNameStart = value.replace(dataType, \"\");\r\n      await this.varName(varNameStart);\r\n\r\n      //SET VAR VALUE AND AUTOSPACE\r\n      if (varName != null && !varName.endsWith(\";\")) {\r\n        var varValueStart = value.replace(dataType + varName + \" = \", \"\");\r\n        this.varValue(varValueStart);\r\n\r\n        //END LINE WITH ';'\r\n        if (value.endsWith(\";\") && this.state.varName) {\r\n          this.endSentence();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  //Validate second data type for example: long int, short int.\r\n  validateSecond() {\r\n    var { dataType } = this.state;\r\n    if (\r\n      dataType === \"long \" ||\r\n      dataType === \"short \" ||\r\n      dataType === \"signed \" ||\r\n      dataType === \"unsigned \"\r\n    ) {\r\n      var { codeInput } = this.state;\r\n      var secondTypeStart = codeInput.replace(dataType, \"\");\r\n      const dataTypes = [\r\n        /^int\\s/,\r\n        /^unsigned\\s/,\r\n        /^signed\\s/,\r\n        /^float\\s/,\r\n        /^double\\s/,\r\n        /^char\\s/,\r\n        /^boolean\\s/,\r\n        /^string\\s/,\r\n        /^short\\s/,\r\n        /^long\\s/\r\n      ];\r\n      var type = null;\r\n      //second data type in expected\r\n      for (var i = 0; i < dataTypes.length; i++) {\r\n        var a = dataTypes[i].exec(secondTypeStart);\r\n        if (a) {\r\n          type = String(a);\r\n        }\r\n      }\r\n      this.setState({ dataType: this.state.dataType + type });\r\n    }\r\n  }\r\n\r\n  //push inputs to state.history and set other values to null\r\n  endSentence() {\r\n    var { varSize, codeInput, varName, dataType, varValue } = this.state;\r\n    var historyValue = this.state.history.slice();\r\n    historyValue.push({\r\n      line: codeInput,\r\n      varName: varName,\r\n      dataType: dataType,\r\n      varValue: varValue,\r\n      varSize: varSize\r\n    });\r\n    this.setState({\r\n      autoSpace: false,\r\n      history: historyValue,\r\n      codeInput: \"\",\r\n      varName: null,\r\n      dataType: null,\r\n      varValue: null,\r\n      varSize: null\r\n    });\r\n  }\r\n\r\n  //test var value\r\n  varValue(s) {\r\n    // test if the var value matches the correct type\r\n    this.setState({ varValue: s });\r\n  }\r\n\r\n  //test var name\r\n  varName(s) {\r\n    var randomValue = this.randomValGen().varValue;\r\n    var varSize = this.randomValGen().size;\r\n    var reVarName = /^\\w+\\s+$/;\r\n    var a = reVarName.exec(s);\r\n    // var ame end with space\r\n    if (a) {\r\n      this.setState({\r\n        varName: String(a),\r\n        autoSpace: false\r\n      });\r\n      if (!this.state.autoSpace) {\r\n        this.setState({\r\n          codeInput: this.state.codeInput + \" = \" + randomValue,\r\n          autoSpace: true,\r\n          varValue: randomValue,\r\n          varSize: varSize\r\n        });\r\n      }\r\n      return null;\r\n    }\r\n    var reVarName2 = /^\\w+/;\r\n    var reVarName3 = /=/;\r\n    //var anme end with ';'\r\n    if (reVarName2.exec(s) && s.endsWith(\";\") && s.search(reVarName3) === -1) {\r\n      s = s.slice(0, -1);\r\n      this.setState({ varName: s });\r\n      var historyValue = this.state.history.slice();\r\n      historyValue.push({\r\n        line: this.state.codeInput,\r\n        varName: s,\r\n        dataType: this.state.dataType,\r\n        varValue: this.state.varValue\r\n      });\r\n      this.setState({\r\n        autoSpace: false,\r\n        history: historyValue,\r\n        codeInput: \"\",\r\n        varName: null,\r\n        dataType: null,\r\n        varValue: null\r\n      });\r\n    }\r\n  }\r\n\r\n  validateFirst(str) {\r\n    const dataTypes = [\r\n      /^int\\s/,\r\n      /^unsigned\\s/,\r\n      /^signed\\s/,\r\n      /^float\\s/,\r\n      /^double\\s/,\r\n      /^char\\s/,\r\n      /^bool\\s/,\r\n      /^string\\s/,\r\n      /^short\\s/,\r\n      /^long\\s/\r\n    ];\r\n    var type = null;\r\n    //loop through datatypes and find exact match using .exec()\r\n    for (var i = 0; i < dataTypes.length; i++) {\r\n      var a = dataTypes[i].exec(str);\r\n      if (a) {\r\n        //if match is found set the data type.\r\n        type = String(a);\r\n        this.setState({ dataType: type });\r\n      }\r\n    }\r\n  }\r\n  //random number generator from Mozila.\r\n  getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  getRandomChar(length) {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // set random value and the size of the data\r\n  randomValGen() {\r\n    var type = this.state.dataType;\r\n    var varValue = null;\r\n    var size = null;\r\n    switch (type) {\r\n      case \"int \": //range: 32767\r\n        varValue = this.getRandomInt(-32767, 32767).toString();\r\n        size = 4;\r\n        break;\r\n      case \"short int \": //range: 32767\r\n        varValue = this.getRandomInt(-32767, 32767).toString();\r\n        size = 2;\r\n        break;\r\n      case \"long int \":\r\n        varValue = this.getRandomInt(-2147483647, 2147483647).toString();\r\n        size = 32;\r\n        break;\r\n      case \"unsigned int \": //range 0,65535\r\n        varValue = this.getRandomInt(0, 65535).toString();\r\n        size = 4;\r\n        break;\r\n      case \"float \":\r\n        varValue =\r\n          this.getRandomInt(0, 20).toString() +\r\n          \".\" +\r\n          this.getRandomInt(0, 200).toString();\r\n        size = 4;\r\n        break;\r\n      case \"double \":\r\n        varValue =\r\n          this.getRandomInt(-32767, 32767).toString() +\r\n          \".\" +\r\n          this.getRandomInt(0, 32767).toString();\r\n        size = 8;\r\n        break;\r\n      case \"long double \":\r\n        varValue =\r\n          this.getRandomInt(-2147483647, 2147483647).toString() +\r\n          \".\" +\r\n          this.getRandomInt(0, 32767).toString();\r\n        size = 12;\r\n        break;\r\n      case \"string \":\r\n        varValue = '\"' + this.getRandomChar(this.getRandomInt(1, 10)) + '\"';\r\n        break;\r\n      case \"char \":\r\n        varValue = this.getRandomChar(1);\r\n        size = 1;\r\n        break;\r\n      case \"unsigned char \":\r\n        varValue = this.getRandomChar(1);\r\n        size = 1;\r\n        break;\r\n      case \"bool \":\r\n        this.getRandomInt(0, 1) === 0\r\n          ? (varValue = \"false\")\r\n          : (varValue = \"true\");\r\n\r\n        size = 1;\r\n        break;\r\n      default:\r\n        varValue = \"null\";\r\n        size = 0;\r\n    }\r\n    return { size, varValue };\r\n  }\r\n\r\n  //this helper function uses React SyntheticEvent helps handleInput() to recognize keyboard \"Backspace\"\r\n  handleDelete = event => {\r\n    if (event.key === \"Backspace\") {\r\n      if (this.state.codeInput.slice(-1) === \"=\") {\r\n        let str = this.state.codeInput.slice(0, -2);\r\n        this.setState({ codeInput: str });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // const {dataType, varValue, varName} = this.state;\r\n    // const values = {dataType, varValue, varName}\r\n    return (\r\n      <div className=\"faceDisplay\">\r\n        <DisplayArea history={this.state.history} />\r\n        <InputCodeArea\r\n          code={this.state.codeInput}\r\n          handleInput={this.handleInput}\r\n          handleDelete={this.handleDelete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FaceA;\r\n","import React, { Component } from \"react\";\r\nimport InterfaceA from \"./components/FaceA\";\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bodyContent\">\r\n        <InterfaceA />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}